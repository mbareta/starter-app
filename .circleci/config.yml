version: 2.1
orbs:
  aws-cli: circleci/aws-cli@5.1.0
  aws-ecr: circleci/aws-ecr@9.3.4
  node: circleci/node@6.1.0
  pulumi: pulumi/pulumi@2.1.0

studion-aws-credentials: &studion-aws-credentials
  role_arn: arn:aws:iam::${STUDION_AWS_ACCOUNT_ID}:role/circle_ci_starter
  region: ${STUDION_AWS_REGION}

executors:
  test:
    docker:
      - image: cimg/node:22.8.0
      - image: cimg/postgres:16.0
  node:
    docker:
      - image: cimg/node:22.8.0
  base:
    docker:
      - image: cimg/base:current
  playwright:
    docker:
      - image: mcr.microsoft.com/playwright:v1.47.2-noble
      - image: cimg/node:22.8.0
      - image: cimg/postgres:16.0

jobs:
  lint-client:
    working_directory: ~/app/client
    executor: node
    steps:
      - checkout:
          path: ~/app
      - node/install-packages:
          override-ci-command: npm i
      - run:
          name: Lint client
          command: npm run lint
  lint-server:
    working_directory: ~/app/server
    executor: node
    steps:
      - checkout:
          path: ~/app
      - node/install-packages:
          override-ci-command: npm i
      - run:
          name: Lint server
          command: npm run lint
  test-client:
    working_directory: ~/app/client
    executor: playwright
    steps:
      - checkout:
          path: ~/app
      - node/install-packages:
          app-dir: ../server
          override-ci-command: npm i
      - node/install-packages:
          override-ci-command: npm i
      - run:
          name: Install Playwright
          command: npx playwright install
      - run:
          name: Run tests
          command: npm test
          environment:
            DATABASE_HOST: localhost
            DATABASE_PORT: 5432
            DATABASE_NAME: circle_test
            DATABASE_USER: postgres
      - store_artifacts:
          path: playwright-report/index.html
  test-server:
    working_directory: ~/app/server
    executor: test
    steps:
      - checkout:
          path: ~/app
      - node/install-packages:
          override-ci-command: npm i
      - run:
          name: Build server
          command: npm run build
      - run:
          name: Run tests
          command: npm test
          environment:
            DATABASE_HOST: localhost
            DATABASE_PORT: 5432
            DATABASE_NAME: circle_test
            DATABASE_USER: postgres
      - store_artifacts:
          path: coverage
  build-server:
    working_directory: ~/app/server
    executor: aws-ecr/default
    parameters:
      role_arn:
        type: string
        description: AWS ARN of the OpenID role connected to OpenID provider.
      region:
        type: string
        default: us-east-1
        description: AWS region value.
      account_id:
        type: string
        description: AWS account ID value.
      ecr_repo:
        type: string
        description: AWS ECR repo name.
    steps:
      - checkout:
          path: ~/app
      - aws-ecr/build_and_push_image:
          auth:
            - aws-cli/setup:
                role_arn: << parameters.role_arn >>
                region: << parameters.region >>
          account_id: << parameters.account_id >>
          attach_workspace: true
          checkout: false
          region: << parameters.region >>
          repo: << parameters.ecr_repo >>
          repo_encryption_type: KMS
          tag: latest,${CIRCLE_SHA1}
  build-client:
    working_directory: ~/app/client
    executor: node
    steps:
      - checkout:
          path: ~/app
      - node/install-packages:
          override-ci-command: npm ci
      - run:
          name: Build server
          command: npm run build
      - store_artifacts:
          path: dist
      - persist_to_workspace:
          root: .
          paths:
            - dist
  deploy:
    working_directory: ~/app/infrastructure
    executor: node
    parameters:
      role_arn:
        type: string
      region:
        type: string
      account_id:
        type: string
      ecr_repo:
        type: string
      stack:
        type: string
    steps:
      - checkout:
          path: ~/app
      - attach_workspace:
          at: ..
      - aws-cli/setup:
          role_arn: << parameters.role_arn >>
          region: << parameters.region >>
      - run:
          name: Configure envs
          command: |
            echo 'export SERVER_IMAGE="<< parameters.account_id >>.dkr.ecr.<< parameters.region >>.amazonaws.com/<< parameters.ecr_repo >>:${CIRCLE_SHA1}"' >> "$BASH_ENV"
            source "$BASH_ENV"
      - pulumi/login
      - node/install-packages
      - pulumi/update:
          stack: << parameters.stack >>
          skip-preview: true
      - pulumi/stack_output:
          stack: << parameters.stack >>
          property_name: frontendBucketName
          env_var: S3_SITE_BUCKET
      - pulumi/stack_output:
          stack: << parameters.stack >>
          property_name: cloudfrontId
          env_var: CF_DISTRIBUTION_ID
      - aws-cli/setup:
          role_arn: << parameters.role_arn >>
          region: << parameters.region >>
      - run:
          name: Deploy to S3
          command: |
            aws s3 sync ../dist s3://${S3_SITE_BUCKET} --no-progress --delete
            aws cloudfront create-invalidation --distribution-id ${CF_DISTRIBUTION_ID} --paths "/*"

workflows:
  version: 2
  test:
    when:
      and:
        - not:
            equal: [master, << pipeline.git.branch >>]
    jobs:
      - lint-server
      - lint-client
      - test-server
      - test-client
  test-build-and-deploy:
    when:
      and:
        - equal: [master, << pipeline.git.branch >>]
    jobs:
      - test-server
      - build-client:
      - build-server:
          <<: *studion-aws-credentials
          account_id: ${STUDION_AWS_ACCOUNT_ID}
          ecr_repo: starter-app/dev
          requires:
            - test-server
      - deploy:
          <<: *studion-aws-credentials
          account_id: ${STUDION_AWS_ACCOUNT_ID}
          ecr_repo: starter-app/dev
          stack: dev
          requires:
            - build-server
            - build-client
